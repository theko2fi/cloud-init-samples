## template: jinja
#cloud-config

{% set default_user = "guacamole" %}
{% set ssh_key = "ssh-rsa XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" %}
{% set postgres_password = "gcZYye@7U89JF%" %}
{% set postgres_user = "guacamole_db_user" %}
{% set postgres_version = "13.4" %}
{% set haproxy_version = "2.4" %}
{% set dockercompose_version = "3.9" %}


groups:
  - docker

users:
  - default
  - name: {{ default_user }}
    groups: sudo, docker
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    homedir: /home/{{ default_user }}
    ssh_authorized_keys:
      - {{ ssh_key }}  

package_update: true
package_upgrade: true
packages:
  - nano
  - curl

write_files:
- path: /home/{{ default_user }}/guacamole/docker-compose.yml
  content: |
    version: '{{ dockercompose_version }}'
    # networks
    # create a network 'guacamole_net' in mode 'bridged'
    networks:
      guacamole_net:
        driver: bridge
      haproxy_net:
        external: true
    # services
    services:
      # guacd
      guacd:
        container_name: guacamole_backend
        image: guacamole/guacd:latest
        networks:
          guacamole_net:
        restart: always
        volumes:
        - ./drive:/drive:rw
        - ./record:/record:rw
      # postgres
      postgres:
        container_name: guacamole_database
        environment:
          PGDATA: /var/lib/postgresql/data/guacamole
          POSTGRES_DB: guacamole_db
          POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
          POSTGRES_USER: '${POSTGRES_USER}'
        image: postgres:{{ postgres_version }}
        networks:
          guacamole_net:
        restart: always
        volumes:
        - ./init:/docker-entrypoint-initdb.d:ro
        - ./data:/var/lib/postgresql/data:rw
      # guacamole
      guacamole:
        container_name: guacamole_frontend
        depends_on:
        - guacd
        - postgres
        environment:
          GUACD_HOSTNAME: guacd
          POSTGRES_DATABASE: guacamole_db
          POSTGRES_HOSTNAME: postgres
          POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
          POSTGRES_USER: '${POSTGRES_USER}'
          POSTGRESQL_AUTO_CREATE_ACCOUNTS: true
        image: guacamole/guacamole:latest
        links:
        - guacd
        networks:
          - guacamole_net
          - haproxy_net
        restart: always
        volumes:
        - ./drive:/drive:rw

- path: /home/{{ default_user }}/guacamole/.env
  content: |
    POSTGRES_PASSWORD={{ postgres_password }}
    POSTGRES_USER={{ postgres_user }}

- path: /home/{{ default_user }}/haproxy/docker-compose.yml
  content: |
    version: '{{ dockercompose_version }}'
    services:
      haproxy:
        container_name: haproxy
        image: haproxytech/haproxy-alpine:{{ haproxy_version }}
        ports:
          - 80:80
          - 443:443
          - 8404:8404
        volumes:
          - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
          - ./certs:/usr/local/etc/haproxy/certs/
        networks:
          - haproxy_net
        restart: always
        environment:
          ENDPOINT: '${ENDPOINT}'
{% if not fqdn %}
      reverse-proxy-https-helper:
        image: alpine
        command: sh -c "cd /etc/ssl/traefik
          && wget traefik.me/cert.pem -O - >> traefik.me.pem
          && wget traefik.me/privkey.pem -O - >> traefik.me.pem"
        volumes:
          - ./certs:/etc/ssl/traefik
{% endif %}
    networks:
      haproxy_net:
        name: haproxy_net
        driver: bridge

- path: /home/{{ default_user }}/haproxy/haproxy.cfg
  content: |
    global
      stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
      log stdout format raw local0 info
      maxconn 50000

    resolvers docker_resolver
      nameserver dns 127.0.0.11:53

    defaults
      mode http
      timeout client 10s
      timeout connect 5s
      timeout server 10s
      timeout http-request 10s
      default-server init-addr none
      log global

    frontend stats
      bind *:8404
      stats enable
      stats uri /
      stats refresh 10s

    frontend myfrontend
      mode http
      bind :80
      bind :443 ssl crt /usr/local/etc/haproxy/certs/
      http-request redirect scheme https code 301 if !{ ssl_fc }
      use_backend %[req.hdr(Host),lower]

    backend "${ENDPOINT}"
      server guacamole guacamole:8080 check inter 10s resolvers docker_resolver

- path: /home/{{ default_user }}/ip.sh
  content: |
    #!/usr/bin/env sh

    #set -ex

    METHOD="${1:-${METHOD:-cloud}}"
    PUBLIC_IP="${8:-${PUBLIC_IP:-localhost}}"

    publicIpFromInterface() {
      # Couldn't find a valid ipv4 address, using the first IP found on the interfaces as the PUBLIC_IP.
      DEFAULT_INTERFACE="$(ip -4 route list match default | grep -Eo "dev .*" | awk '{print $2}')"
      PUBLIC_IP=$(ip -4 addr sh dev "$DEFAULT_INTERFACE" | grep -w inet | head -n1 | awk '{print $2}' | grep -oE '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b')
      echo "${PUBLIC_IP}"
    }

    publicIpFromMetadata() {
      if cloud-init query vendordata | grep DigitalOcean >/dev/null; then
        #http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address
        PUBLIC_IP="$(curl -s http://169.254.169.254/metadata/v1/reserved_ip/ipv4/ip_address)"
      elif test "$(cloud-init query platform)" = "azure"; then
        PUBLIC_IP="$(curl -H Metadata:true --noproxy '*' 'http://169.254.169.254/metadata/instance/network/interface/0/ipv4/ipAddress/0/publicIpAddress/?api-version=2021-02-01&format=text')"
      fi

      if echo "${PUBLIC_IP}" | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b"; then
        echo "we got it"
      else
        publicIpFromInterface
      fi
    }

    if test "$METHOD" = "cloud"; then
      publicIpFromMetadata
    fi
  permissions: '0755'

# Configure and deploy Guacamole
runcmd:
  - 'curl -fsSL https://get.docker.com -o get-docker.sh'
  - |
    sh get-docker.sh | grep -qE "ERROR: Unsupported distribution 'rocky'|ERROR: Unsupported distribution 'almalinux'" && sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo && sudo dnf -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin
  - 'systemctl start docker'
  - 'systemctl enable docker'
  - 'mkdir -p /home/{{ default_user }}/guacamole/init >/dev/null 2>&1'
  - 'chmod -R +x /home/{{ default_user }}/guacamole/init'
  - 'docker run --rm guacamole/guacamole /opt/guacamole/bin/initdb.sh --postgres > /home/{{ default_user }}/guacamole/init/initdb.sql'
  - 'mkdir -p /home/{{ default_user }}/haproxy/certs'
{% if fqdn %}
  - 'echo ENDPOINT={{ fqdn }} | tee /home/{{ default_user }}/haproxy/.env'
  - bash -c 'openssl req -nodes -newkey rsa:2048 -new -x509 -keyout /dev/stdout -out /dev/stdout -subj "/CN={{ fqdn }}" > /home/{{ default_user }}/haproxy/certs/{{ fqdn }}.pem'
{% else %}
  - bash -c 'PUBLIC_IP="$(/home/{{ default_user }}/ip.sh | grep -oE "\b([0-9]{1,3}\.){3}[0-9]{1,3}\b")"; PUBLIC_IP_FMT="${PUBLIC_IP//[.]/-}"; echo ENDPOINT="${PUBLIC_IP_FMT}.traefik.me" | tee /home/{{ default_user }}/haproxy/.env'
{% endif %}
  - 'chown -R {{ default_user }}:{{ default_user }} /home/{{ default_user }}/'
  - 'docker compose -f /home/{{ default_user }}/haproxy/docker-compose.yml up -d && docker compose -f /home/{{ default_user }}/guacamole/docker-compose.yml up -d'
